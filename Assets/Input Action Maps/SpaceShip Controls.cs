//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input Action Maps/SpaceShip Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpaceShipControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpaceShipControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SpaceShip Controls"",
    ""maps"": [
        {
            ""name"": ""SpaceShip_Controls"",
            ""id"": ""ade88571-548b-4ca7-b5da-399cf2e957ad"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f9fc210d-11a9-4b96-a70f-3dc67d781a87"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation Lock"",
                    ""type"": ""Button"",
                    ""id"": ""586ae396-7f16-4616-8946-12ad096fc434"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""HUD Switch"",
                    ""type"": ""Button"",
                    ""id"": ""e152a8c6-c46c-4b36-a71b-afafa59900a7"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ed29f896-3245-4639-b126-cb6cd7f2bbd0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Swtich Ammo"",
                    ""type"": ""Button"",
                    ""id"": ""2a0f23fb-3397-4769-b0cf-8004946311ce"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Un Tether"",
                    ""type"": ""Button"",
                    ""id"": ""08bec861-269c-4b43-a481-cd2a4ebaadfa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""1994c317-d2d1-440e-b177-1e2ec44a11a9"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ffbfb516-5928-4fb4-bc63-7d565462f3d4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""da1bb8ce-132b-482d-80ab-88d5c7d5911b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""1328d097-cf7f-432f-a6a0-b9e440611c41"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""fe5dba6b-9e28-4898-b105-bdace5883813"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ba3e5abb-2832-4d0a-be6e-3e790c04e661"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bf56433-70f6-4a53-90a7-b904923b8667"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation Lock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""61fc2ae0-cf0f-410e-9e6c-19b0588659e1"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HUD Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d2662ce-b09a-43cf-9e8c-491363033fb3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ee7118a-15db-4361-ad99-d0ec3e067fd9"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Swtich Ammo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4986d7dd-39c9-49a7-addb-49f14ab11cfc"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Un Tether"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SpaceShip_Controls
        m_SpaceShip_Controls = asset.FindActionMap("SpaceShip_Controls", throwIfNotFound: true);
        m_SpaceShip_Controls_Movement = m_SpaceShip_Controls.FindAction("Movement", throwIfNotFound: true);
        m_SpaceShip_Controls_RotationLock = m_SpaceShip_Controls.FindAction("Rotation Lock", throwIfNotFound: true);
        m_SpaceShip_Controls_HUDSwitch = m_SpaceShip_Controls.FindAction("HUD Switch", throwIfNotFound: true);
        m_SpaceShip_Controls_Shoot = m_SpaceShip_Controls.FindAction("Shoot", throwIfNotFound: true);
        m_SpaceShip_Controls_SwtichAmmo = m_SpaceShip_Controls.FindAction("Swtich Ammo", throwIfNotFound: true);
        m_SpaceShip_Controls_UnTether = m_SpaceShip_Controls.FindAction("Un Tether", throwIfNotFound: true);
    }

    ~@SpaceShipControls()
    {
        UnityEngine.Debug.Assert(!m_SpaceShip_Controls.enabled, "This will cause a leak and performance issues, SpaceShipControls.SpaceShip_Controls.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceShip_Controls
    private readonly InputActionMap m_SpaceShip_Controls;
    private List<ISpaceShip_ControlsActions> m_SpaceShip_ControlsActionsCallbackInterfaces = new List<ISpaceShip_ControlsActions>();
    private readonly InputAction m_SpaceShip_Controls_Movement;
    private readonly InputAction m_SpaceShip_Controls_RotationLock;
    private readonly InputAction m_SpaceShip_Controls_HUDSwitch;
    private readonly InputAction m_SpaceShip_Controls_Shoot;
    private readonly InputAction m_SpaceShip_Controls_SwtichAmmo;
    private readonly InputAction m_SpaceShip_Controls_UnTether;
    public struct SpaceShip_ControlsActions
    {
        private @SpaceShipControls m_Wrapper;
        public SpaceShip_ControlsActions(@SpaceShipControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_SpaceShip_Controls_Movement;
        public InputAction @RotationLock => m_Wrapper.m_SpaceShip_Controls_RotationLock;
        public InputAction @HUDSwitch => m_Wrapper.m_SpaceShip_Controls_HUDSwitch;
        public InputAction @Shoot => m_Wrapper.m_SpaceShip_Controls_Shoot;
        public InputAction @SwtichAmmo => m_Wrapper.m_SpaceShip_Controls_SwtichAmmo;
        public InputAction @UnTether => m_Wrapper.m_SpaceShip_Controls_UnTether;
        public InputActionMap Get() { return m_Wrapper.m_SpaceShip_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceShip_ControlsActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceShip_ControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceShip_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceShip_ControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @RotationLock.started += instance.OnRotationLock;
            @RotationLock.performed += instance.OnRotationLock;
            @RotationLock.canceled += instance.OnRotationLock;
            @HUDSwitch.started += instance.OnHUDSwitch;
            @HUDSwitch.performed += instance.OnHUDSwitch;
            @HUDSwitch.canceled += instance.OnHUDSwitch;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @SwtichAmmo.started += instance.OnSwtichAmmo;
            @SwtichAmmo.performed += instance.OnSwtichAmmo;
            @SwtichAmmo.canceled += instance.OnSwtichAmmo;
            @UnTether.started += instance.OnUnTether;
            @UnTether.performed += instance.OnUnTether;
            @UnTether.canceled += instance.OnUnTether;
        }

        private void UnregisterCallbacks(ISpaceShip_ControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @RotationLock.started -= instance.OnRotationLock;
            @RotationLock.performed -= instance.OnRotationLock;
            @RotationLock.canceled -= instance.OnRotationLock;
            @HUDSwitch.started -= instance.OnHUDSwitch;
            @HUDSwitch.performed -= instance.OnHUDSwitch;
            @HUDSwitch.canceled -= instance.OnHUDSwitch;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @SwtichAmmo.started -= instance.OnSwtichAmmo;
            @SwtichAmmo.performed -= instance.OnSwtichAmmo;
            @SwtichAmmo.canceled -= instance.OnSwtichAmmo;
            @UnTether.started -= instance.OnUnTether;
            @UnTether.performed -= instance.OnUnTether;
            @UnTether.canceled -= instance.OnUnTether;
        }

        public void RemoveCallbacks(ISpaceShip_ControlsActions instance)
        {
            if (m_Wrapper.m_SpaceShip_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceShip_ControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceShip_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceShip_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceShip_ControlsActions @SpaceShip_Controls => new SpaceShip_ControlsActions(this);
    public interface ISpaceShip_ControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotationLock(InputAction.CallbackContext context);
        void OnHUDSwitch(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnSwtichAmmo(InputAction.CallbackContext context);
        void OnUnTether(InputAction.CallbackContext context);
    }
}
